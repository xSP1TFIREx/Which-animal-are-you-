import UIKit

class QuestionsViewController: UIViewController {
    
    //    MARK: - IBOutlets
    //    –õ–µ–π–±–ª —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏ –∏ —à–∫–∞–ª–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
    @IBOutlet weak var questionLabel: UILabel!
    @IBOutlet weak var questionProgressView: UIProgressView!
    
    //    –°—Ç–∞–∫ —Å –∫–Ω–æ–ø–∫–∞–º–∏
    @IBOutlet weak var buttonStack: UIStackView!
    @IBOutlet var singleButtons: [UIButton]!
    
    //    –°—Ç–∞–∫ —Å–æ —Å–≤–∏—á–∞–º–∏
    @IBOutlet weak var switchStack: UIStackView!
    @IBOutlet var multipleLabels: [UILabel]!
    @IBOutlet var multipleSwitches: [UISwitch]!
    
    //    –°—Ç–∞–∫ —Å–æ —Å–ª–∞–π–¥–µ—Ä–æ–º
    @IBOutlet weak var rangedStack: UIStackView!
    @IBOutlet var rangedLabels: [UILabel]!
    @IBOutlet weak var rangedSlider: UISlider! {
//        didSet - —ç—Ç–æ –º–µ—Ç–æ–¥/—Å–≤–æ–π—Å—Ç–≤–æ –∏–ª–∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª—å(–¥–æ –∫–æ–Ω—Ü–∞ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª—Å—è —Å —ç—Ç–∏–º), –∫–æ—Ç–æ—Ä—ã–π –∏—Å–ø–æ–ª–Ω—è–µ—Ç –∫–æ–¥ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∫–∞–∫–æ–≥–æ-—Ç–æ —Å–≤–æ–π—Å—Ç–≤–∞ –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏/–ø–æ—è–≤–ª–µ–Ω–∏—è —É –Ω–µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏—è
        didSet {
            let answerCount = Float(currentAnswers.count - 1)
            rangedSlider.maximumValue = answerCount
            rangedSlider.value = answerCount / 2
        }
    }
    
    //    MARK: - Private properties
    private let questions = Question.getQuestions()
    private var questionIndex = 0
    private var currentAnswers: [Answer] { questions[questionIndex].answers }
    private var answersChosen: [Answer] = []
    private var resultAnimalAnswers: [Character] = []



    
    
    
    override func viewDidLoad() {
        super.viewDidLoad()

        updateUI()
        
    }


    
//    MARK: - IBActions
    @IBAction func singleAnswerButtonPressed(_ sender: UIButton) {
        guard let buttonIndex = singleButtons.firstIndex(of: sender) else {return}
        let currentAnswer = currentAnswers[buttonIndex]
        answersChosen.append(currentAnswer)

        goToNextQuestion()
    }
    
    @IBAction func multipleAnswerButtonPressed() {
        for (switches, answer) in zip(multipleSwitches, currentAnswers) {
            if switches.isOn {
                answersChosen.append(answer)
            }
        }

        goToNextQuestion()
    }
    
    
    @IBAction func rangedAnswerButtonPressed() {
        let index = lrintf(rangedSlider.value)
        answersChosen.append(currentAnswers[index])
        
        goToNextQuestion()
    }
}

//MARK: - Extention for QuestionViewController
extension QuestionsViewController {
    
    private func updateUI() {
        
        //    –°–∫—Ä—ã—Ç—å —Å—Ç–µ–∫–∏
        for stackView in [switchStack, rangedStack, buttonStack] {
            stackView?.isHidden = true
        }
        
        //    –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
        let currentQuestion = questions[questionIndex]
        
        //    –û—Ç–æ–±—Ä–∞–∑–∏—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–π –≤–æ–ø—Ä–æ—Å –≤ –ª–µ–π–±–ª–µ
        questionLabel.text = currentQuestion.title
        
        //    –ü–æ–¥—Å—á—ë—Ç –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —à–∫–∞–ª—ã
        let totalProgress = Float(questionIndex) / Float(questions.count)
        
        //    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è —à–∫–∞–ª—ã
        questionProgressView.setProgress(totalProgress, animated: true)
        
        //    –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞
        title = "–í–æ–ø—Ä–æ—Å ‚Ññ \(questionIndex + 1) –∏–∑ \(questions.count)"
        
        //         –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Å—Ç–∞–∫ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        showCurrentAnswers(for: currentQuestion.responsetype)
        
    }
    
        //    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤
    private func showCurrentAnswers(for type: ResponseType) {
        switch type {
        case .single: showSingleStack(with: currentAnswers)
        case .multiple: showMultipleStack(with: currentAnswers)
        case .ranged: showRangedStack(with: currentAnswers)
        }
    }
    
        //    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–µ–∫–∞ —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    private func showSingleStack(with answers: [Answer]) {
        buttonStack.isHidden = false
        
        for (button, answer) in zip(singleButtons, answers) {
            button.setTitle(answer.title, for: .normal)
        }
    }
    
    //    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–µ–∫–∞ —Å–æ —Å–≤–∏—á–∞–º–∏ –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    private func showMultipleStack(with answers: [Answer]) {
        switchStack.isHidden = false
        
        for (label, answer) in zip(multipleLabels, answers){
            label.text = answer.title
            
        }
    }
    
//    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Å—Ç–µ–∫–∞ —Å–æ —Å–ª–∞–π–¥–µ—Ä–æ–º –Ω–∞ —ç–∫—Ä–∞–Ω–µ
    private func showRangedStack(with answers: [Answer]) {
        rangedStack.isHidden = false
        rangedLabels.first?.text = answers.first?.title
        rangedLabels.last?.text = answers.last?.title
        
    }
    
//    MARK: - Functions for calculations text for answer screeen
        
//    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–º–∞–π–ª–∏–∫–∞ –∏ –µ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
    func getCalculatedDataForResult() -> (description: String, emoji: Character){
        
        for title in answersChosen {
            switch title.animal{
            case .dog: resultAnimalAnswers.append(Animal.dog.rawValue)
            case .cat: resultAnimalAnswers.append(Animal.cat.rawValue)
            case .rabbit: resultAnimalAnswers.append(Animal.rabbit.rawValue)
                case .turtle: resultAnimalAnswers.append(Animal.turtle.rawValue)}
        }
        
//        –§—É–Ω–∫—Ü–∏—è, –∫–æ—Ç–æ—Ä–∞—è —Å–æ—Ä—Ç–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤ —Å–º–∞–π–ª–∏–∫–æ–≤ –∏ –æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ç–∞–º —Ç–æ–ª—å–∫–æ —Å–∞–º—ã–π —á–∞—Å—Ç–æ –≤—Å—Ç—Ä–µ—á–∞–µ–º—ã–π
        let mostFrequent = Dictionary(grouping: resultAnimalAnswers, by: {$0})
            .max(by: {$0.value.count < $1.value.count})?.value ?? []
        
//        –ü—Ä–∏—Å–≤–∞–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –∑–Ω–∞—á–µ–Ω–∏–µ –º–∞—Å—Å–∏–≤–∞
        let test5 = mostFrequent[0]
        
//        –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—ë –∑–Ω–∞—á–µ–Ω–∏–µ
        switch test5 {
        case Character("üê∂"):
            return (Animal.dog.definition, Animal.dog.rawValue)
        case Character("üê±"):
            return (Animal.cat.definition, Animal.cat.rawValue)
        case Character("üê∞"):
            return (Animal.rabbit.definition, Animal.rabbit.rawValue)
        case Character("üê¢"):
            return (Animal.turtle.definition, Animal.turtle.rawValue)
        default:
            return ("", "a")
        }

    }
    
}

//MARK: - Extension for navigation
extension QuestionsViewController {
    private func goToNextQuestion() {
        questionIndex += 1
        
        if questionIndex < questions.count {
            updateUI()
            return
        }
        
        performSegue(withIdentifier: "showResult", sender: nil)
    }

//    –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        guard let resultVC = segue.destination as? ResultViewController else {return}
        resultVC.animalIcon = "–í—ã - \(getCalculatedDataForResult().emoji)"
        resultVC.resultText = getCalculatedDataForResult().description
    }
    
}
